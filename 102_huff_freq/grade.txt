Grading at 11/14/2022:01:01:15.271335
For commit ID e9151fa3972563424ab6a55eba5bb6ebfb127bdf
Grading at Sun Nov 13 08:01:10 PM EST 2022
compiling
g++ -ggdb3 -Wall -Werror -pedantic -o testFreq testFreq.cpp readFreq.cpp
Make succeed, testFreq created
Testcase 1
-----------------------
  - Valgrind was clean (no errors, no memory leaks)
Checking output:
Your file matched the expected output
Testcase passed 
Testcase 2
-----------------------
  - Valgrind was clean (no errors, no memory leaks)
Checking output:
Your file matched the expected output
Testcase passed 
Testcase 3
-----------------------
  - Valgrind reported errors
Valgrind reported errors (test failed).
==406108== Memcheck, a memory error detector
==406108== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==406108== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==406108== Command: ./testFreq /usr/share/dict/words
==406108== Parent PID: 406107
==406108== 
==406108== Invalid read of size 8
==406108==    at 0x10972A: readFrequencies(char const*) (readFreq.cpp:31)
==406108==    by 0x1093F3: main (testFreq.cpp:10)
==406108==  Address 0x804dd2a98 is not stack'd, malloc'd or (recently) free'd
==406108== 
==406108== 
==406108== Process terminating with default action of signal 11 (SIGSEGV)
==406108==  Access not within mapped region at address 0x804DD2A98
==406108==    at 0x10972A: readFrequencies(char const*) (readFreq.cpp:31)
==406108==    by 0x1093F3: main (testFreq.cpp:10)
==406108==  If you believe this happened as a result of a stack
==406108==  overflow in your program's main thread (unlikely but
==406108==  possible), you can try to increase the size of the
==406108==  main thread stack using the --main-stacksize= flag.
==406108==  The main thread stack size used in this run was 8388608.
==406108== 
==406108== HEAP SUMMARY:
==406108==     in use at exit: 83,424 bytes in 4 blocks
==406108==   total heap usage: 4 allocs, 0 frees, 83,424 bytes allocated
==406108== 
==406108== LEAK SUMMARY:
==406108==    definitely lost: 0 bytes in 0 blocks
==406108==    indirectly lost: 0 bytes in 0 blocks
==406108==      possibly lost: 0 bytes in 0 blocks
==406108==    still reachable: 83,424 bytes in 4 blocks
==406108==         suppressed: 0 bytes in 0 blocks
==406108== Reachable blocks (those to which a pointer was found) are not shown.
==406108== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==406108== 
==406108== For lists of detected and suppressed errors, rerun with: -s
==406108== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testcase 4
-----------------------
  - Valgrind was clean (no errors, no memory leaks)
Checking output:
Your file matched the expected output
Testcase passed 

Overall Grade: C
